import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from "axios";
import { useDispatch, useSelector } from "react-redux";
import Loading from "../../components/Loading";
const URL_SERVICE = "https://api.aal-cloud.com/api/cosmos";
import { setDatosDashBoardPeriod } from "../../components/store/slices/datosdashboard";
import { setDatosUser } from "../../components/store/slices/users";
import { setDatosVentas } from "../../components/store/slices/ventas";
import { setDatosCostosVentas } from "../../components/store/slices/costosventas";
import { setVentasProductos } from "../../components/store/slices/ventasproductos";
import HomeEcommerce from './HomeEcommerce';

function DatosEntorno(props) {
  const router = useRouter();
  const { datUsuario } = props;
  const [isLoading, setIsLoading] = useState(true)
  const dispatch = useDispatch();
  const [opcion, setOpcion] = useState(0)
  const [datos, setDatos] = useState(0)
  const [datosCostos, setDatosCostos] = useState(null)
  const [vtasProductos, setVtasProductos] = useState(null)
  const [detalleVtas, setDetalleVtas] = useState(null)
  const [ok, setOk] = useState(null)
  const [ventasdia, setVentasDia] = useState(null)
  let tipousuario = null;

  const totalventas = useSelector((state) => state.datosdashboard.datosdashboard.ventas_periodo);
  //tipousuario = useSelector((state) => state.tipousuario.tipousuario);

  useEffect(() => {
    tipousuario = JSON.parse(localStorage.getItem("tipousuario"));
    setVentasDia(JSON.parse(localStorage.getItem("ventasdia")));
    console.log("VENTAS DIA XXX: ", ventasdia)
    // Debemos validar el tipo de usuario y cargar datos iniciales al state

    // Datos de ventas
    //Tipos de usuarios 1 = Compras, 4 = Ventas, 3 = Operaciones, 2 = Gerencia
    /*
    if (tipousuario === 4) {
      // Lee datos de ventas, ventas diarias y acumuladas por periodo y total corrido del año

      axios({
        method: "post",
        url: `${URL_SERVICE}/6`,
        headers: {
          "Content-type": "application/json",
        },
      })
        .then((res) => {
          if (res.status == 200) {
            //console.log("RETORNA API INIT VENTAS: ", res.data)
            if (res.data) {
              dispatch(setDatosVentas(res.data));
              setDatos(res.data);
              cargaOpcion(tipousuario)
            } else {
              console.log("RETORNA API VENTAS: ", "ERROR")
            }

          } else {
            console.log("RETORNA API VENTAS: ", "ERROR")
          }
        })
        .catch((error) =>
          alert("Error Inesperado")
        )
      // Lee datos costos de ventas, costos del mes y costos acumuladas total corrido del año
      axios({
        method: "post",
        url: `${URL_SERVICE}/10`,
        headers: {
          "Content-type": "application/json",
        },
      })
        .then((res) => {
          if (res.status == 200) {
            //console.log("RETORNA COSTOS VENTAS: ", res.data)
            if (res.data) {
              dispatch(setDatosCostosVentas(res.data));
              setDatosCostos(res.data);
              cargaOpcion(tipousuario)
              setIsLoading(false)
            } else {
              console.log("RETORNA COSTOS VTAS: ", "ERROR")
            }

          } else {
            console.log("RETORNA COSTOS VTAS: ", "ERROR")
          }
        })
        .catch((error) =>
          alert("Error Inesperado")
        )

      // Lee ventas por productos mes y acumulada para calcular la participacion

      axios({
        method: "post",
        url: `${URL_SERVICE}/11`,
        headers: {
          "Content-type": "application/json",
        },
      })
        .then((res) => {
          if (res.status == 200) {
            //console.log("RETORNA VENTAS PRODUCTOS: ", res.data)
            if (res.data) {
              dispatch(setVentasProductos(res.data));
              setVtasProductos(res.data);
              cargaOpcion(tipousuario)
            } else {
              console.log("RETORNA VTAS PRODUCTOS: ", "ERROR")
            }

          } else {
            console.log("RETORNA VTAS PRODUCTOS: ", "ERROR")
          }
        })
        .catch((error) =>
          alert("Error Inesperado")
        )
      // Detalle datos de ventas para aplicar filtros
      axios({
        method: "post",
        url: `${URL_SERVICE}/8`,
        headers: {
          "Content-type": "application/json",
        },
      })
        .then((res) => {
          if (res.status == 200) {
            //console.log("RETORNA VENTAS RESUMEN: ", res.data)
            if (res) {
              setDetalleVtas(res.data);
              //localStorage.setItem('detalledatosvtas', JSON.stringify(datos));
              setIsLoading(false);
              cargaOpcion(tipousuario)
            } else {
              console.log("RETORNA VTAS DETALLE: ", "ERROR")
            }

          } else {
            console.log("RETORNA VTAS DETALLE: ", "ERROR")
          }
        })
        .catch((error) =>
          alert("Error Inesperado")
        )


    } else
      router.push("/");
      */
  }, []);

  const cargaOpcion = (tipo) => {
    setOpcion(tipo)
  }

  const leer = (tipo) => {
    setOk(true)
  }

  return (
    <div>
      <button onClick={() => leer()}>
        generar
      </button>
      {/*
        isLoading ?
          <Loading />
          :
          opcion == 4 ?
            datos ?
              vtasProductos ?
                datosCostos ?
                  <HomeEcommerce datos={datos} datosCostos={datosCostos} vtasProductos={vtasProductos}
                    detalleVtas={detalleVtas} />
                  : <Loading />
                : <Loading />
              : <Loading />
            :
            null
*/
      }

{
  ok ?
  console.log("VENTAS DIA : ", ventasdia)
  :
  null
}
      {
ok ?
(
        <table id="terceros" className="table">
          <thead>
            <tr>
              <th>Id_Centro_Operacion</th>
              <th>Descripcion_Centro_Operacion</th>
              <th>Tipo_Docto</th>
              <th>Documento</th>
              <th>Fecha_Documento</th>
              <th>Periodo</th>
              <th>Referencia_Item</th>
              <th>Descripcion_Item</th>
              <th>Cant_U_M</th>
              <th>Vlr_Subtotal</th>
              <th>Vlr_descuento</th>
              <th>Vlr_Impuestos</th>
              <th>Vlr_Neto</th>
              <th>Vlr_Costo</th>
            </tr>
          </thead>
          <tbody>
            {
              ventasdia && ventasdia.map((facturas, index) => {
                return (
                  <tr>
                    <td>{facturas.Id_Centro_Operacion}</td>
                    <td>{facturas.Descripcion_Centro_Operacion}</td>
                    <td>{facturas.Tipo_Docto}</td>
                    <td>{facturas.Documento}</td>
                    <td>{facturas.Fecha_Documento}</td>
                    <td>{facturas.Periodo}</td>
                    <td>{facturas.Referencia_Item}</td>
                    <td>{facturas.Descripcion_Item}</td>
                    <td>{facturas.Cant_U_M}</td>
                    <td>{facturas.Vlr_Subtotal}</td>
                    <td>{facturas.Vlr_descuento}</td>
                    <td>{facturas.Vlr_Impuestos}</td>
                    <td>{facturas.Vlr_Neto}</td>
                    <td>{facturas.Vlr_Costo}</td>

                  </tr>
                )
              })
            }
          </tbody>
        </table>
)
:
null
      }
    </div>
  );
}

export default DatosEntorno;